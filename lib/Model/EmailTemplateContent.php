<?php
/**
 * EmailTemplateContent
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AirEml
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * airEml - API
 *
 * airEml - API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AirEml\Model;

use \ArrayAccess;
use \AirEml\ObjectSerializer;

/**
 * EmailTemplateContent Class Doc Comment
 *
 * @category Class
 * @package  AirEml
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmailTemplateContent implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailTemplateContent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'locale' => '\AirEml\Model\LocaleCode',
        'subject' => 'string',
        'text_plain' => 'string',
        'text_html' => 'string',
        'text_amp' => 'string',
        'builder_html' => 'string',
        'variables_settings' => '\AirEml\Model\EmailTemplateContentVariablesSettingsInner[]',
        'created_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'locale' => null,
        'subject' => null,
        'text_plain' => null,
        'text_html' => null,
        'text_amp' => null,
        'builder_html' => null,
        'variables_settings' => null,
        'created_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'locale' => false,
        'subject' => false,
        'text_plain' => false,
        'text_html' => false,
        'text_amp' => false,
        'builder_html' => false,
        'variables_settings' => false,
        'created_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'locale' => 'locale',
        'subject' => 'subject',
        'text_plain' => 'text_plain',
        'text_html' => 'text_html',
        'text_amp' => 'text_amp',
        'builder_html' => 'builder_html',
        'variables_settings' => 'variables_settings',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'locale' => 'setLocale',
        'subject' => 'setSubject',
        'text_plain' => 'setTextPlain',
        'text_html' => 'setTextHtml',
        'text_amp' => 'setTextAmp',
        'builder_html' => 'setBuilderHtml',
        'variables_settings' => 'setVariablesSettings',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'locale' => 'getLocale',
        'subject' => 'getSubject',
        'text_plain' => 'getTextPlain',
        'text_html' => 'getTextHtml',
        'text_amp' => 'getTextAmp',
        'builder_html' => 'getBuilderHtml',
        'variables_settings' => 'getVariablesSettings',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('text_plain', $data ?? [], null);
        $this->setIfExists('text_html', $data ?? [], null);
        $this->setIfExists('text_amp', $data ?? [], null);
        $this->setIfExists('builder_html', $data ?? [], null);
        $this->setIfExists('variables_settings', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets locale
     *
     * @return \AirEml\Model\LocaleCode|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param \AirEml\Model\LocaleCode|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject The is a subject of the email notification.
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets text_plain
     *
     * @return string|null
     */
    public function getTextPlain()
    {
        return $this->container['text_plain'];
    }

    /**
     * Sets text_plain
     *
     * @param string|null $text_plain The is a text body of the email notification.
     *
     * @return self
     */
    public function setTextPlain($text_plain)
    {
        if (is_null($text_plain)) {
            throw new \InvalidArgumentException('non-nullable text_plain cannot be null');
        }
        $this->container['text_plain'] = $text_plain;

        return $this;
    }

    /**
     * Gets text_html
     *
     * @return string|null
     */
    public function getTextHtml()
    {
        return $this->container['text_html'];
    }

    /**
     * Sets text_html
     *
     * @param string|null $text_html The is a html body of the email notification. Must be valid HTML.
     *
     * @return self
     */
    public function setTextHtml($text_html)
    {
        if (is_null($text_html)) {
            throw new \InvalidArgumentException('non-nullable text_html cannot be null');
        }
        $this->container['text_html'] = $text_html;

        return $this;
    }

    /**
     * Gets text_amp
     *
     * @return string|null
     */
    public function getTextAmp()
    {
        return $this->container['text_amp'];
    }

    /**
     * Sets text_amp
     *
     * @param string|null $text_amp The is a amp body of the email notification.
     *
     * @return self
     */
    public function setTextAmp($text_amp)
    {
        if (is_null($text_amp)) {
            throw new \InvalidArgumentException('non-nullable text_amp cannot be null');
        }
        $this->container['text_amp'] = $text_amp;

        return $this;
    }

    /**
     * Gets builder_html
     *
     * @return string|null
     */
    public function getBuilderHtml()
    {
        return $this->container['builder_html'];
    }

    /**
     * Sets builder_html
     *
     * @param string|null $builder_html This is settings for UI Template Builder. Must be valid JSON.
     *
     * @return self
     */
    public function setBuilderHtml($builder_html)
    {
        if (is_null($builder_html)) {
            throw new \InvalidArgumentException('non-nullable builder_html cannot be null');
        }
        $this->container['builder_html'] = $builder_html;

        return $this;
    }

    /**
     * Gets variables_settings
     *
     * @return \AirEml\Model\EmailTemplateContentVariablesSettingsInner[]|null
     */
    public function getVariablesSettings()
    {
        return $this->container['variables_settings'];
    }

    /**
     * Sets variables_settings
     *
     * @param \AirEml\Model\EmailTemplateContentVariablesSettingsInner[]|null $variables_settings variables_settings
     *
     * @return self
     */
    public function setVariablesSettings($variables_settings)
    {
        if (is_null($variables_settings)) {
            throw new \InvalidArgumentException('non-nullable variables_settings cannot be null');
        }
        $this->container['variables_settings'] = $variables_settings;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at The datetime when the Template Content was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


